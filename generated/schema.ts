// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Campaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Campaign entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Campaign must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Campaign", id.toString(), this);
    }
  }

  static load(id: string): Campaign | null {
    return changetype<Campaign | null>(store.get("Campaign", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operatorAddress(): string {
    let value = this.get("operatorAddress");
    return value!.toString();
  }

  set operatorAddress(value: string) {
    this.set("operatorAddress", Value.fromString(value));
  }

  get treasuryAddress(): string {
    let value = this.get("treasuryAddress");
    return value!.toString();
  }

  set treasuryAddress(value: string) {
    this.set("treasuryAddress", Value.fromString(value));
  }

  get campaignName(): string {
    let value = this.get("campaignName");
    return value!.toString();
  }

  set campaignName(value: string) {
    this.set("campaignName", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get targetGoal(): BigInt {
    let value = this.get("targetGoal");
    return value!.toBigInt();
  }

  set targetGoal(value: BigInt) {
    this.set("targetGoal", Value.fromBigInt(value));
  }

  get totalDonated(): BigInt {
    let value = this.get("totalDonated");
    return value!.toBigInt();
  }

  set totalDonated(value: BigInt) {
    this.set("totalDonated", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value!.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get timestampCreated(): BigInt {
    let value = this.get("timestampCreated");
    return value!.toBigInt();
  }

  set timestampCreated(value: BigInt) {
    this.set("timestampCreated", Value.fromBigInt(value));
  }

  get promotionPrice(): BigInt {
    let value = this.get("promotionPrice");
    return value!.toBigInt();
  }

  set promotionPrice(value: BigInt) {
    this.set("promotionPrice", Value.fromBigInt(value));
  }

  get minimumDonation(): BigInt {
    let value = this.get("minimumDonation");
    return value!.toBigInt();
  }

  set minimumDonation(value: BigInt) {
    this.set("minimumDonation", Value.fromBigInt(value));
  }

  get platformFeePercentage(): BigInt {
    let value = this.get("platformFeePercentage");
    return value!.toBigInt();
  }

  set platformFeePercentage(value: BigInt) {
    this.set("platformFeePercentage", Value.fromBigInt(value));
  }

  get campaignFeePercentage(): BigInt {
    let value = this.get("campaignFeePercentage");
    return value!.toBigInt();
  }

  set campaignFeePercentage(value: BigInt) {
    this.set("campaignFeePercentage", Value.fromBigInt(value));
  }

  get promotions(): Array<string> {
    let value = this.get("promotions");
    return value!.toStringArray();
  }

  set promotions(value: Array<string>) {
    this.set("promotions", Value.fromStringArray(value));
  }

  get donors(): Array<string> {
    let value = this.get("donors");
    return value!.toStringArray();
  }

  set donors(value: Array<string>) {
    this.set("donors", Value.fromStringArray(value));
  }
}

export class Promotion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Promotion entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Promotion must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Promotion", id.toString(), this);
    }
  }

  static load(id: string): Promotion | null {
    return changetype<Promotion | null>(store.get("Promotion", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get campaign(): string {
    let value = this.get("campaign");
    return value!.toString();
  }

  set campaign(value: string) {
    this.set("campaign", Value.fromString(value));
  }

  get promoterAddress(): string {
    let value = this.get("promoterAddress");
    return value!.toString();
  }

  set promoterAddress(value: string) {
    this.set("promoterAddress", Value.fromString(value));
  }

  get amountPaid(): BigInt {
    let value = this.get("amountPaid");
    return value!.toBigInt();
  }

  set amountPaid(value: BigInt) {
    this.set("amountPaid", Value.fromBigInt(value));
  }

  get promotionUrl(): string {
    let value = this.get("promotionUrl");
    return value!.toString();
  }

  set promotionUrl(value: string) {
    this.set("promotionUrl", Value.fromString(value));
  }

  get campaignPointsToClaim(): BigInt | null {
    let value = this.get("campaignPointsToClaim");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set campaignPointsToClaim(value: BigInt | null) {
    if (!value) {
      this.unset("campaignPointsToClaim");
    } else {
      this.set("campaignPointsToClaim", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Donor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Donor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Donor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Donor", id.toString(), this);
    }
  }

  static load(id: string): Donor | null {
    return changetype<Donor | null>(store.get("Donor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get campaign(): string {
    let value = this.get("campaign");
    return value!.toString();
  }

  set campaign(value: string) {
    this.set("campaign", Value.fromString(value));
  }

  get donorAddress(): string {
    let value = this.get("donorAddress");
    return value!.toString();
  }

  set donorAddress(value: string) {
    this.set("donorAddress", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get campaignPointsEarned(): BigInt | null {
    let value = this.get("campaignPointsEarned");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set campaignPointsEarned(value: BigInt | null) {
    if (!value) {
      this.unset("campaignPointsEarned");
    } else {
      this.set("campaignPointsEarned", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
